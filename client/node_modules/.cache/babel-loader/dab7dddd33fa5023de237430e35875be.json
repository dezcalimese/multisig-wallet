{"ast":null,"code":"import Web3 from 'web3';\nimport Wallet from './contracts/Wallet.json';\n\nconst getWeb3 = () => {\n  return new Promise((resolve, reject) => {\n    window.addEventListener('load', async () => {\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n\n        try {\n          await window.ethereum.enable();\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      } else if (window.web3) {\n        resolve(window.web3);\n      } else {\n        reject('Must install Metamask');\n      }\n    });\n  });\n};\n\nconst getWallet = async web3 => {\n  const networkId = await web3.eth.net.getId();\n  const deployedNetwork = Wallet.networks[networkId];\n  return new web3.eth.Contract(Wallet.abi, deployedNetwork && deployedNetwork.address);\n};\n\nexport { getWeb3, getWallet };","map":{"version":3,"sources":["/Users/benzo/multisig-wallet/client/src/utils.js"],"names":["Web3","Wallet","getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","web3","enable","error","getWallet","networkId","eth","net","getId","deployedNetwork","networks","Contract","abi","address"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAClB,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AACxC,UAAGD,MAAM,CAACE,QAAV,EAAoB;AAChB,cAAMC,IAAI,GAAG,IAAIT,IAAJ,CAASM,MAAM,CAACE,QAAhB,CAAb;;AACA,YAAI;AACA,gBAAMF,MAAM,CAACE,QAAP,CAAgBE,MAAhB,EAAN;AACAN,UAAAA,OAAO,CAACK,IAAD,CAAP;AACH,SAHD,CAGE,OAAME,KAAN,EAAa;AACXN,UAAAA,MAAM,CAACM,KAAD,CAAN;AACH;AACJ,OARD,MAQS,IAAGL,MAAM,CAACG,IAAV,EAAgB;AACrBL,QAAAA,OAAO,CAACE,MAAM,CAACG,IAAR,CAAP;AACH,OAFQ,MAEF;AACHJ,QAAAA,MAAM,CAAC,uBAAD,CAAN;AACH;AACJ,KAdD;AAeH,GAhBM,CAAP;AAiBH,CAlBD;;AAoBA,MAAMO,SAAS,GAAG,MAAMH,IAAN,IAAc;AAC5B,QAAMI,SAAS,GAAG,MAAMJ,IAAI,CAACK,GAAL,CAASC,GAAT,CAAaC,KAAb,EAAxB;AACA,QAAMC,eAAe,GAAGhB,MAAM,CAACiB,QAAP,CAAgBL,SAAhB,CAAxB;AACA,SAAO,IAAIJ,IAAI,CAACK,GAAL,CAASK,QAAb,CACHlB,MAAM,CAACmB,GADJ,EAEHH,eAAe,IAAIA,eAAe,CAACI,OAFhC,CAAP;AAIH,CAPD;;AASA,SAASnB,OAAT,EAAkBU,SAAlB","sourcesContent":["import Web3 from 'web3';\nimport Wallet from './contracts/Wallet.json';\n\nconst getWeb3 = () => {\n    return new Promise((resolve, reject) => {\n        window.addEventListener('load', async () => {\n            if(window.ethereum) {\n                const web3 = new Web3(window.ethereum);\n                try {\n                    await window.ethereum.enable();\n                    resolve(web3);\n                } catch(error) {\n                    reject(error);\n                }\n            }   else if(window.web3) {\n                resolve(window.web3);\n            } else {\n                reject('Must install Metamask');\n            }\n        });\n    });\n};\n\nconst getWallet = async web3 => {\n    const networkId = await web3.eth.net.getId();\n    const deployedNetwork = Wallet.networks[networkId];\n    return new web3.eth.Contract(\n        Wallet.abi,\n        deployedNetwork && deployedNetwork.address\n    );\n};\n\nexport { getWeb3, getWallet };"]},"metadata":{},"sourceType":"module"}