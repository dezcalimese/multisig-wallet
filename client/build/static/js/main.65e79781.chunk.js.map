{"version":3,"sources":["utils.js","Header.js","NewTransfer.js","TransferList.js","App.js","index.js"],"names":["getWallet","web3","a","eth","net","getId","networkId","deployedNetwork","Wallet","networks","Contract","abi","address","Header","approvers","quorum","join","NewTransfer","createTransfer","useState","undefined","transfer","setTransfer","updateTransfer","e","field","value","target","onSubmit","preventDefault","submit","htmlFor","id","type","onChange","TransferList","transfers","approveTransfer","map","amount","to","approvals","onClick","sent","App","setWeb3","accounts","setAccounts","wallet","setWallet","setApprovers","setQuorum","setTransfers","useEffect","Promise","resolve","reject","window","addEventListener","ethereum","Web3","enable","getAccounts","methods","getApprovers","call","getTransfers","init","length","send","from","transferId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.65e79781.chunk.js","sourcesContent":["import Web3 from 'web3';\nimport Wallet from './contracts/Wallet.json';\n\nconst getWeb3 = () => {\n    return new Promise((resolve, reject) => {\n        window.addEventListener('load', async () => {\n            if(window.ethereum) {\n                const web3 = new Web3(window.ethereum);\n                try {\n                    await window.ethereum.enable();\n                    resolve(web3);\n                } catch(error) {\n                    reject(error);\n                }\n            }   else if(window.web3) {\n                resolve(window.web3);\n            } else {\n                reject('Must install Metamask');\n            }\n        });\n    });\n};\n\nconst getWallet = async web3 => {\n    const networkId = await web3.eth.net.getId();\n    const deployedNetwork = Wallet.networks[networkId];\n    return new web3.eth.Contract(\n        Wallet.abi,\n        deployedNetwork && deployedNetwork.address\n    );\n};\n\nexport { getWeb3, getWallet };","import React from 'react';\n\nfunction Header({approvers, quorum}) {\n    return (\n        <header>\n            <ul>\n                <li>Approvers: {approvers.join(', ')}</li>\n                <li>Quorum: {quorum}</li>\n            </ul>\n        </header>\n    )\n}\n\nexport default Header;","import React, { useState } from 'react';\n\nfunction NewTransfer({createTransfer}) {\n    const [transfer, setTransfer] = useState(undefined);\n\n    const submit = e => {\n        e.preventDefault();\n        createTransfer(transfer);\n    }\n\n    const updateTransfer = (e, field) => {\n        const value = e.target.value;\n        setTransfer({...transfer, [field]: value});\n    }\n\n    return (\n        <div>\n            <h2>Create transfer</h2>\n            <form onSubmit={(e) => submit(e)}>\n                <label htmlFor=\"amount\">Amount</label>\n                <input\n                    id=\"amount\"\n                    type=\"text\"\n                    onChange={e => updateTransfer(e, 'amount')}\n                />\n                <label htmlFor=\"to\">To</label>\n                <input\n                    id=\"to\"\n                    type=\"text\"\n                    onChange={e => updateTransfer(e, 'to')}\n                />\n                <button>Submit</button>\n            </form>\n        </div>\n    )\n}\n\nexport default NewTransfer;","import React from 'react';\n\nfunction TransferList({transfers, approveTransfer}) {\n    return(\n        <div>\n            <h2>Transfers</h2>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Id</th>\n                        <th>Amount</th>\n                        <th>To</th>\n                        <th>approvals</th>\n                        <th>sent</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {transfers.map((transfer) => (\n                        <tr key={transfer.id}>\n                            <td>{transfer.id}</td>\n                            <td>{transfer.amount}</td>\n                            <td>{transfer.to}</td>\n                            <td>\n                                {transfer.approvals}\n                                <button onClick={() => approveTransfer(transfer.id)}>Approve</button>\n                            </td>\n                            <td>{transfer.sent ? 'yes' : 'no'}</td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nexport default TransferList;","import React, { useEffect, useState } from 'react';\nimport { getWeb3, getWallet } from './utils.js';\nimport Header from './Header.js';\nimport NewTransfer from './NewTransfer.js';\nimport TransferList from './TransferList.js';\n\nfunction App() {\n  const [web3, setWeb3] = useState(undefined);\n  const [accounts, setAccounts] = useState(undefined);\n  const [wallet, setWallet] = useState(undefined);\n  const [approvers, setApprovers] = useState([]);\n  const [quorum, setQuorum] = useState(undefined);\n  const [transfers, setTransfers] = useState([]);\n\n  useEffect(() => {\n    const init = async () => {\n      const web3 = await getWeb3();\n      const accounts = await web3.eth.getAccounts();\n      const wallet = await getWallet(web3);\n      const approvers = await wallet.methods.getApprovers().call();\n      const quorum = await wallet.methods.quorum().call();\n      const transfers = await wallet.methods.getTransfers().call();\n      setWeb3(web3);\n      setAccounts(accounts);\n      setWallet(wallet);\n      setApprovers(approvers);\n      setQuorum(quorum);\n      setTransfers(transfers);\n    };\n    init();\n  }, []);\n\n  const createTransfer = transfer => {\n    wallet.methods\n      .createTransfer(transfer.amount, transfer.to)\n      .send({from: accounts[0]});\n  }\n\n  const approveTransfer = transferId => {\n    wallet.methods\n      .approveTransfer(transferId)\n      .send({from: accounts[0]});\n  }\n\n  if(\n    typeof web3 === 'undefined'\n    || typeof accounts === 'undefined'\n    || typeof wallet === 'undefined'\n    || approvers.length === 0\n    || typeof quorum === 'undefined'\n  ) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n        Multisig Dapp\n        <Header approvers={approvers} quorum={quorum} />\n        <NewTransfer createTransfer={createTransfer} />\n        <TransferList transfers={transfers} approveTransfer={approveTransfer} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}